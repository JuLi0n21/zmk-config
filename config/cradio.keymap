/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
       combo_zero {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp N0>;
        };
        combo_one {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp N1>;
        };
        combo_three {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp N3>;
        };
        combo_four {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp N4>;
        };
        combo_six {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp N6>;
        };
        combo_seven {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp N7>;
        };
        combo_eight {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp N8>;
        };
        combo_nine {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp N9>;
        };
        combo_space {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kp SPC>;
        };
        combo_bracketl {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
        };
        combo_bracketr {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RPAR>;
        };
        combo_bracesl {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LBKT>;
        };
        combo_bracesr {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RBKT>;
        };
        combo_curlyl {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LBRC>;
        };
        combo_curlyr {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RBRC>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp SEMI>;
        };
        combo_rest {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&tog 0>;
        };

        
    };

        keymap {
                compatible = "zmk,keymap";
        //================================DEFAULT_LAYER====================================
        // Key 1| Key 2 | Key 3 | Key 4 | Key 5 | Key 10 | Key 9 | Key 8 | Key 7 | Key 6 | 
        //   5  |  p    | y     | f     | g     |  c     | r     |  l    |  0    |       |
        //   a  |  o    | e     | u     | i     | d      | h     | t     | n     |  s    |
        //      | q     |  j    |   k   |  x    | b      | m     | w     |   v   |  z    |
        //      |       |       | Shift |layer1 | layer2 | cntrl |       |       |       |

       		default_layer {
		bindings = <
		&kp NUM_5 &kp P &kp Y &kp F &kp G 						&kp C &kp R  &kp L    &kp NUM_0   &kp P 
		&kp A &kp O &kp E &kp U &kp I 			        	        &kp D &kp H &kp T &kp M &kp S
		&mt LSFT Z &kp Q &kp J &kp K &kp X				        &kp B &kp M  &kp W &kp V &kp Z
          				&kp LSFT &tog 1   				&tog 2 &kp LCTL
		>;
		};

       		left_layer {
        //================================MEDIA_LAYER=======================================
        // Key 0| Key 2 | Key 3 | Key 4 | Key 5 | Key 10 | Key 9 | Key 8 | Key 7 | Key 6 |
        //      |       |   UP  |       |       |        |       |       |       |       |
        //      | LEFT  | DOWN  | RIGHT |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5		&kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 
		&kp TAB    &kp LC(S)    &kp DQT      &kp PIPE2     &kp HASH 		&kp MINUS &kp EQL  &kp LBKT &kp RBKT  &kp DEL 
		&kp ESC    &kp TILDE 	&kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2 	&kp MINUS &kp GRAVE &kp LBKT &kp RBKT  &kp DEL 
					    &mo 1  &kp LGUI  					&kp RGUI &mo 2 
		>;
		};
		
		right_layer {
        // Key 0| Key 2 | Key 3 | Key 4 | Key 5 | Key 10 | Key 9 | Key 8 | Key 7 | Key 6 |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &mo 3 &kp LCTL  				&kp SPC  &mo 2 
		>;
		};	
		
		tri_layer {
        // Key 0| Key 2 | Key 3 | Key 4 | Key 5 | Key 10 | Key 9 | Key 8 | Key 7 | Key 6 |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
