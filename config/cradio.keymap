/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 
    //Numbers
    combos {
        compatible = "zmk,combos";
       combo_zero { //			2
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp N2>;
        };
        combo_two { //			4
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp N4>;
        };
        combo_three { //		6
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp N6>;
        };
        combo_four { //			8
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp N8>;
        };
        combo_five { //			9	
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp N9>;
        };
	    combo_six { //			7
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp N7>;
        };
        combo_seven { //		5
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp N5>;
        };
        combo_eight { //		3
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp N3>;
        };
    //SPECIAL CHARS
        combo_bracketl { //		(
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LPAR>;
        };
        combo_bracketr { //		)
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RPAR>;
        };
        combo_bracesl { //		{
            timeout-ms = <50>;
            key-positions = <13 15>;
            bindings = <&kp LBKT>;
        };
        combo_bracesr { //		}
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp RBKT>;
        };
        combo_curlyl { //		]
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LBRC>;
        };
        combo_curlyr { //		[
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp RBRC>;
        };
        combo_devide { //	/
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp SLASH>;
        };
         combo_minus { //	-
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp MINUS>;
        };
         combo_equal { //	/
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp EQUAL>;
        };
         combo_semicolon { //	;
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp SEMICOLON>;
        };
         combo_plus { //	+
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp PLUS>;
        };
         combo_multiply { //	*
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp DOUBLE_QUOTES>;
        };
          combo_delete { //	del
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp DELETE>;
        };
          combo_backspace { //	*
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kp BACKSPACE>;
        };
          combo_enter { //	*
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp RETURN>;
        };
        combo_rest { //			
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&to 0>;
        };
        combo_i { //			i
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&to 0>;
        };

        // Specialkeys 
        //  &mt     Hold / tap key
        //  &lt         Swaps layer
        //  &kp         presses key
        //  &trans      empty to properly handle empty keys
    };

        //      ========================================           =========================================
        //      |       |      |       |       |       |           |       |       |       |       |       |
        //      |       |      |       |       |       |           |       |       |       |       |       |
        //      |       |      |       |       |       |           |       |       |       |       |       |
        //                             |       |       |           |       |       |

        //      =========================================           =========================================
        //      | Key 0 |   1   |   2   |   3   |   4   |           |   5   |   6   |   7   |   8   |   9   |
        //      |  10   |  11   |  12   |  13   |  14   |           |  15   |   16  |  17   |  18   |  19   |
        //      |  20   |  21   |  22   |  23   |  24   |           |  25   |   26  |  27   |  28   |  29   |
        //                              |  30   |  31   |           |  32   |   33  |

        // KEY COMBOS
        //      ========================================           =========================================
        //      |       2      4       6       8       |   DELETE  |       9       7       5       3       |
        //      |       |      (       [       {       |   bcsp    |       }       ]       )       |       |
        //      |       |      /       -       =       |   ENTER   |       ;       +       "       |       |
        //                             |       |       | DFT_LAYER |       |       |

        //DEFAULT_LAYER
        //      ========================================= DEFAULT_LAYER =========================================
        //      |   0   |   P   |   Y   |   F   |   G   |               | SPACE |   C   |   R   |   L   |   1   |
        //      |   A   |   O   |   E   |   U   |   I   |               |   D   |   H   |   T   |   N   |   S   |
        //      |  TAB  |   Q   |   J   |   K   |   X   |               |   B   |   M   |   W   |   V   |   Z   |
        //                              | lsft  |       |               |       | lctrl |
        keymap {
                compatible = "zmk,keymap";
                default_layer {
		            bindings = <
                &kp NUM_0 &kp P &kp Y &kp F &kp G 			    &kp SPACE &kp C &kp R   &kp L &kp NUM_1 
                &kp A &kp O &kp E &kp U &none 			        &kp D   &kp H   &kp T   &kp N   &kp S
                &mt TAB Z &kp Q &kp J  &kp K   &kp X				    &kp B   &kp M   &kp W   &kp V   &kp Z
	                                    &kp LSFT &none  				&to 2 &kp LCTL
        >;
		};

       		left_layer {
                bindings = <
        //      ========================================= DEFAULT_LAYER =========================================
        //      |   0   |   P   |   Y   |   F   |   G   |               | SPACE |   C   |   R   |   L   |   1   |
                &kp NUM_0 &kp P   &kp Y    &kp F  &kp G 			    &kp C   &kp R   &kp L   &kp SEMI &kp NUM_0 
        //      |   A   |   O   |   E   |   U   |   I   |               |   D   |   H   |   T   |   N   |   S   |
                &kp A   &kp O   &kp E   &kp U   &kp I 			        &kp D   &kp H   &kp T   &kp M   &kp S
        //      |       |   Q   |   J   |   K   |   X   |               |   B   |   M   |   W   |   V   |   Z   |
                &mt LSFT Z &kp Q &kp J  &kp K   &kp X				    &kp B   &kp M   &kp W   &kp V   &kp Z
        //                              | lsft  |       |               |       | lctrl |
	                                    &kp LSFT &trans   				&to 2 &kp LCTL
        >;
		};
		
		right_layer {
        // Key 0| Key 2 | Key 3 | Key 4 | Key 5 | Key 10 | Key 9 | Key 8 | Key 7 | Key 6 |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
		bindings = <
		&none &none &none &bt BT_CLR &bt BT_SEL 0   	&bt BT_SEL 3 &bt BT_NXT &none &none &none 
		&none &none &none &none &bt BT_SEL 1        &bt BT_SEL 4 &bt BT_PRV &none &none &none
        &none &none &none &none &bt BT_SEL 2       &none &none &none &none &none
					      &none &none       &none &none 
		>;
		};	
		
		tri_layer {
        // Key 0| Key 2 | Key 3 | Key 4 | Key 5 | Key 10 | Key 9 | Key 8 | Key 7 | Key 6 |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
        //      |       |       |       |       |        |       |       |       |       |
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};


